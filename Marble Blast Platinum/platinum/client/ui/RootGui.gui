//-----------------------------------------------------------------------------
// Copyright (c) 2021 The Platinum Team
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to
// deal in the Software without restriction, including without limitation the
// rights to use, copy, modify, merge, publish, distribute, sublicense, and/or
// sell copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in
// all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
// FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
// DEALINGS IN THE SOFTWARE.
//-----------------------------------------------------------------------------

//--- OBJECT WRITE BEGIN ---
new GuiControl(RootGui) {
	profile = "GuiDefaultProfile";
	horizSizing = "right";
	vertSizing = "bottom";
	position = "0 0";
	extent = "1024 768";
	minExtent = "8 8";
	visible = "1";
	helpTag = "0";
	_guiSize = "1024 768";

	new GuiChunkedBitmapCtrl() {
		profile = "GuiDefaultProfile";
		horizSizing = "width";
		vertSizing = "height";
		position = "0 0";
		extent = "1024 768";
		minExtent = "8 8";
		visible = "1";
		helpTag = "0";
		bitmap = "./menu/brown-gradient.png";
		useVariable = "0";
		tile = "0";
	};
	new GuiChunkedBitmapCtrl() {
		profile = "GuiDefaultProfile";
		horizSizing = "width";
		vertSizing = "height";
		position = "0 0";
		extent = "1024 768";
		minExtent = "8 8";
		visible = "1";
		helpTag = "0";
		bitmap = "./menu/noise-pattern-overlay.png";
		useVariable = "0";
		tile = "1";
	};
	new GuiChunkedBitmapCtrl(PM_PreviewNotFoundImage) {
		profile = "GuiDefaultProfile";
		horizSizing = "center";
		vertSizing = "center";
		position = "557 55";
		extent = "165 330";
		minExtent = "8 8";
		visible = "1";
		helpTag = "0";
		bitmap = "./menu/preview-not-found.png";
		useVariable = "0";
		tile = "0";
	};
	new GuiBitmapCtrl(PM_MissionImage) {
		profile = "GuiDefaultProfile";
		horizSizing = "width";
		vertSizing = "height";
		position = "0 0";
		extent = "1024 768";
		minExtent = "27 27";
		visible = "1";
		helpTag = "0";
		bitmap = "~/data/previews_pq/tutorial/TrainingWheels.prev";
		wrap = "0";
	};
	new GameTSCtrl(PG_GameCtrl) {
		profile = "GuiDefaultProfile";
		horizSizing = "width";
		vertSizing = "height";
		position = "0 0";
		extent = "1024 768";
		minExtent = "8 8";
		visible = "1";
		helpTag = "0";
		cameraZRot = "0";
		forceFOV = "90";
	};
	new ShowTSCtrl(PG_ShowCtrl) {
		profile = "GuiDefaultProfile";
		horizSizing = "width";
		vertSizing = "height";
		position = "0 0";
		extent = "1024 768";
		minExtent = "8 8";
		visible = "0";
		helpTag = "0";
		cameraZRot = "0";
		forceFOV = "90";
		postFX = "1";
	};
};
//--- OBJECT WRITE END ---

function RootGui::onWake(%this) {
	//No fan noises
	alxSetChannelVolume(1, 0);

	//The ? needs to be centered above the box
	%height = getWord(Canvas.getExtent(), 1) * 3 / 4;
	%width = %height / 2;
	%x = (getWord(Canvas.getExtent(), 0) - %width) / 2;
	%y = (getWord(Canvas.getExtent(), 1) - %height) / 2;
	PM_PreviewNotFoundImage.resize(%x, %y, %width, %height);

	%this.resetDisplay();
}

function RootGui::resetDisplay(%this) {
	//Cleanup camera fov
	resetCameraFov();
	applyGraphicsQuality();
}

function RootGui::getContent(%this) {
	if (Canvas.getCount() == 1)
		return Canvas.getObject(0);
	return Canvas.getObject(1);
}

function RootGui::setContent(%this, %ctrl) {
	if (%this.getContent().getId() == %ctrl.getId()) {
		//Just pop all of the dialogs we have
		while (Canvas.getCount() > 2) {
			Canvas.popDialog(Canvas.getObject(2));
		}
		return;
	}

	Canvas.setContent(%this);
	%ctrl.setExtent(Canvas.getExtent());
	Canvas.pushDialog(%ctrl);
}

function RootGui::pushDialog(%this, %ctrl) {
	%ctrl.setExtent(Canvas.getExtent());
	Canvas.pushDialog(%ctrl);
}

function RootGui::popDialog(%this, %ctrl) {
	// Push to back first so it doesn't rearrange the other dialogs
	Canvas.pushToBack(%ctrl);
	Canvas.popDialog(%ctrl);
}

function GuiControl::onWake(%this) {}
function GuiControl::onSleep(%this) {}

function RootGui::showPreviewImage(%this, %show) {
	%this.previewImage = %show;
	if (%show) {
		%file = $Menu::MissionFile;
		//Temp image while loading
		%prev = PlayMissionGui.ml.getMissionPreview($CurrentGame, $MissionType, getMissionInfo(%file));
		PM_MissionImage.setBitmap(%prev);
		PG_GameCtrl.setVisible(false);
		copyBlurImage(%prev);

		if (marblelandIsMission(%file)) {
			cancel(%this.prevDownloadSch);
			if (!isBitmap(%prev)) {
				%id = marblelandGetFileId(%file);
				if (!isBitmap("vfs://marbleland/prev-" @ %id @ ".jpg")) {
					%this.prevDownloadSch = schedule(500, 0, "marblelandDownloadPreview", %id, onMarblelandPreviewDownloaded, PM_MissionImage);
				} else {
					PM_MissionImage.setBitmap("vfs://marbleland/prev-" @ %id @ ".jpg");
					copyBlurImage("vfs://marbleland/prev-" @ %id @ ".jpg");
				}
			}
		}
	} else {
		PG_GameCtrl.setVisible(true);

		if ($Game::Menu) {
			//Disable extra shadery things so the images work correctly
			%this.resetDisplay();
		}
	}
}

function onMarblelandPreviewDownloaded(%id, %success, %bmp) {
	if (%success) {
		%bmp.setBitmap("vfs://marbleland/prev-" @ %id @ ".jpg");
		copyBlurImage("vfs://marbleland/prev-" @ %id @ ".jpg");
	}
}

function RootMenu_NewMission(%file) {
	RootGui.showPreviewImage(true);
}
function RootMenu_MissionLoaded() {
	if ($Game::Introduction) {
		menuPlay();
		return;
	}
	if ($Menu::Startup) {
		applyGraphicsQuality();
		RootGui.setContent(MainMenuGui);
		$Menu::Startup = 0;
	}
	RootGui.resetDisplay();

	if ($pref::AnimatePreviews) {
		menuStartCameraOverview();
		RootGui.schedule(500, showPreviewImage, false);
	}
}
function RootMenu_LoadMission() {
	RootGui.showPreviewImage(true);
}
function RootMenu_StartLoading() {
	RootGui.showPreviewImage(true);
}
function RootMenu_LoadProgress(%progress) {
	if ($Menu::Startup) {
		LoadingGui.setProgress("Starting Background...", %progress, 1);
	} else {
		LoadingGui.setProgress("Loading Level...", %progress, 1);
	}
}
function RootMenu_MissionExit() {
	if (!$Game::Introduction) {
		RootGui.setContent(PlayMissionGui);
	}
}
function RootMenu_PostIntroduction() {
	//Swap the pref from Tut_TrainingWheels to just training wheels
	$pref::highscores["platinum/data/missions_pq/tutorial/TrainingWheels.mcs", 0] = $pref::highscores[$Server::MissionFile, 0];

	//Wait around
	Canvas.setContent(RootGui);
	RootGui.setContent(LoadingGui);
	RootGui.showPreviewImage(true);

	//Show the new mission before anything happens
	menuSetMission("platinum/data/missions_pq/tutorial/TrainingWheels.mcs");
	Canvas.repaint();

	//Most of this is copied from PlayMissionGui::open(), but slightly changed
	// because we already have a server running.

	//Build any level lists we need
	PlayMissionGui.setGame("PlatinumQuest");
	PlayMissionGui.setMissionType("Tutorial");
	PlayMissionGui.buildGameList();

	//Jump right in
	PlayMissionGui.setMissionByIndex(1);
	PlayMissionGui.loadMission();

	//Save prefs after so we clear anything left over
	deleteVariables("*Tut_TrainingWheels*");
	savePrefs();
}
